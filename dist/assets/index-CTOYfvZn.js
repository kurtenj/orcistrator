(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const o of document.querySelectorAll('link[rel="modulepreload"]'))r(o);new MutationObserver(o=>{for(const n of o)if(n.type==="childList")for(const c of n.addedNodes)c.tagName==="LINK"&&c.rel==="modulepreload"&&r(c)}).observe(document,{childList:!0,subtree:!0});function a(o){const n={};return o.integrity&&(n.integrity=o.integrity),o.referrerPolicy&&(n.referrerPolicy=o.referrerPolicy),o.crossOrigin==="use-credentials"?n.credentials="include":o.crossOrigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function r(o){if(o.ep)return;o.ep=!0;const n=a(o);fetch(o.href,n)}})();const s={pcForm:document.getElementById("pc-form"),pcNameInput:document.getElementById("pc-name"),pcInitiativeInput:document.getElementById("pc-initiative"),pcAcInput:document.getElementById("pc-ac"),randomPcButton:document.getElementById("random-pc-button"),randomPcDropdown:document.getElementById("random-pc-dropdown"),randomPcCountButtons:document.querySelectorAll(".random-pc-count-btn"),monsterForm:document.getElementById("monster-form"),monsterSearchInput:document.getElementById("monster-search"),monsterCountInput:document.getElementById("monster-count"),monsterList:document.getElementById("monster-list"),initiativeListElement:document.getElementById("initiative-list"),startCombatButton:document.getElementById("start-combat"),nextTurnButton:document.getElementById("next-turn"),turnInfoElement:document.getElementById("turn-info"),activeStatBlockElement:document.getElementById("active-stat-block"),combatToolbar:document.getElementById("combat-toolbar"),combatCounters:document.getElementById("combat-counters"),roundCounter:document.getElementById("round-counter"),turnCounter:document.getElementById("turn-counter")},U="https://www.dnd5eapi.co/api/2014",p={participants:[],currentTurnIndex:-1,combatStarted:!1,monsterData:{},currentRound:0,totalTurns:0},g=()=>p.participants,I=()=>p.currentTurnIndex,E=()=>p.combatStarted,K=()=>p.monsterData,X=()=>p.currentRound,J=()=>p.totalTurns,Q=t=>{if(!Array.isArray(t)){console.error("setParticipants: Expected an array, got",typeof t);return}p.participants=t},_=t=>{if(typeof t!="number"||t<-1){console.error("setCurrentTurnIndex: Expected a non-negative number or -1, got",t);return}t>=p.participants.length&&(console.warn(`setCurrentTurnIndex: Index ${t} is out of bounds, clamping to ${p.participants.length-1}`),t=Math.max(-1,p.participants.length-1)),p.currentTurnIndex=t},Y=t=>{p.combatStarted=t},Z=(t,e)=>{if(!t||typeof t!="string"){console.error("addMonsterData: Invalid monster index",t);return}if(!e||typeof e!="object"){console.error("addMonsterData: Invalid monster data",e);return}p.monsterData[t]=e},R=t=>{if(!t||typeof t!="object"){console.error("addParticipant: Invalid participant",t);return}if(!t.id){console.error("addParticipant: Participant missing ID",t);return}if(p.participants.some(e=>e.id===t.id)){console.error("addParticipant: Participant with ID already exists",t.id);return}p.participants.push(t)},F=(t,e)=>{if(!t){console.error("updateParticipant: Missing ID");return}if(!e||typeof e!="object"){console.error("updateParticipant: Invalid updates",e);return}const a=p.participants.findIndex(r=>r.id===t);a!==-1?p.participants[a]={...p.participants[a],...e}:console.error("Participant not found with ID:",t)},tt=t=>{if(!t){console.error("removeParticipant: Missing ID");return}const e=p.participants.findIndex(a=>a.id===t);e!==-1?(p.participants.splice(e,1),p.currentTurnIndex>=p.participants.length&&(p.currentTurnIndex=p.participants.length-1)):console.error("removeParticipant: Participant not found with ID:",t)},et=t=>{p.currentRound=t},nt=()=>(p.currentRound++,p.currentRound),ot=t=>{p.totalTurns=t},at=()=>(p.totalTurns++,p.totalTurns);async function st(){try{const e=await(await fetch(`${U}/monsters`)).json();if(e&&e.results)return rt(e.results),e.results}catch(t){console.error("Error fetching monsters:",t),s.turnInfoElement.textContent="Error loading monsters. Please refresh the page."}}function rt(t){s.monsterList.innerHTML="",t.forEach(e=>{const a=document.createElement("option");a.value=e.name,a.dataset.index=e.index,s.monsterList.appendChild(a)})}async function it(t){try{console.log("Fetching monster details for:",t);const a=await(await fetch(`${U}/monsters/${t}`)).json();return console.log("Monster API response:",a),console.log("Monster actions from API:",a.actions),Z(t,a),a}catch(e){throw console.error("Error fetching monster details:",e),e}}function O(){const t=X(),e=J(),a=g(),r=E();if(s.roundCounter.textContent=`Round: ${t}`,a.length>0){const o=(e-1)%a.length+1;s.turnCounter.textContent=`Turn: ${o}/${a.length}`}else s.turnCounter.textContent="Turn: 0/0";r?(s.nextTurnButton.classList.remove("hidden"),s.nextTurnButton.disabled=!1,s.combatCounters.classList.remove("hidden"),s.startCombatButton.disabled=!0):(s.nextTurnButton.classList.add("hidden"),s.nextTurnButton.disabled=!0,s.combatCounters.classList.add("hidden"),s.startCombatButton.disabled=!1)}function v(){const t=g(),e=I(),a=E(),r=a&&e>=0&&e<t.length?t[e].id:null,o=[...t].sort((i,d)=>d.initiative-i.initiative);let n=-1;r&&(n=o.findIndex(i=>i.id===r)),ct(o)?(s.initiativeListElement.innerHTML="",o.forEach((i,d)=>{const m=document.createElement("div");let l="flex items-center justify-between p-3 mb-2 rounded-md";i.type==="monster"?(l+=" bg-monster/20",i.defeated&&(l+=" opacity-60")):l+=" bg-secondary",a&&d===n&&(l+=" border-2",l+=i.type==="monster"?" border-monster":" border-primary"),m.className=l,m.dataset.id=i.id;const u=document.createElement("div");u.className="flex flex-col";const f=document.createElement("div");f.className="flex items-center gap-2";const b=document.createElement("span");b.className="font-medium",b.textContent=i.name;const h=document.createElement("span");h.className="text-sm text-gray-500",h.textContent=`(${i.initiative})`,f.appendChild(b),f.appendChild(h);const y=document.createElement("div");if(y.className="text-xs text-gray-500",y.textContent=`AC: ${i.ac}`,u.appendChild(f),u.appendChild(y),m.appendChild(u),i.type==="monster"){const $=document.createElement("div");$.className="flex flex-col items-end gap-1";const L=document.createElement("div");L.className="monster-hp flex items-center gap-2";const A=document.createElement("span");A.className="hp-text text-xs",A.textContent=`${i.currentHp}/${i.maxHp}`;const k=document.createElement("div");k.className="w-16 h-2 bg-gray-200 rounded-full overflow-hidden";const D=i.currentHp/i.maxHp*100,H=document.createElement("div");let C="h-full";D<=25?C+=" bg-red-500":D<=50?C+=" bg-yellow-500":C+=" bg-green-500",H.className=C,H.style.width=`${D}%`,k.appendChild(H),L.appendChild(A),L.appendChild(k);const T=document.createElement("div");T.className="hp-controls flex gap-1";const P=document.createElement("button");P.className="h-6 px-2 py-0 rounded-md bg-red-600 text-white text-xs",P.textContent="-",P.dataset.action="damage";const w=document.createElement("button");w.className="h-6 px-2 py-0 rounded-md border border-green-500 text-green-500 text-xs hover:bg-green-50",w.textContent="+",w.dataset.action="heal",T.appendChild(P),T.appendChild(w),$.appendChild(L),$.appendChild(T),m.appendChild($)}const M=document.createElement("button");M.className="ml-2 h-6 w-6 p-0 rounded-full text-gray-500 hover:bg-gray-100",M.textContent="Ã—",M.dataset.action="remove",m.appendChild(M),s.initiativeListElement.appendChild(m)}),Q(o),n!==-1&&n!==e&&_(n)):lt(o,n,a)}function ct(t){const e=s.initiativeListElement.querySelectorAll("[data-id]");if(e.length!==t.length)return!0;for(let a=0;a<t.length;a++){const r=e[a].dataset.id,o=t[a].id;if(r!==o)return!0}return!1}function lt(t,e,a){s.initiativeListElement.querySelectorAll("[data-id]").forEach((o,n)=>{const c=t.find(i=>i.id===o.dataset.id);if(c&&(a&&n===e?(o.classList.add("border-2"),c.type==="monster"?o.classList.add("border-monster"):o.classList.add("border-primary")):(o.classList.remove("border-2"),o.classList.remove("border-monster"),o.classList.remove("border-primary")),c.type==="monster")){const i=o.querySelector(".hp-text");i&&(i.textContent=`${c.currentHp}/${c.maxHp}`);const d=o.querySelector("div.h-full");if(d){const m=c.currentHp/c.maxHp*100;d.style.width=`${m}%`,d.classList.remove("bg-red-500","bg-yellow-500","bg-green-500"),m<=25?d.classList.add("bg-red-500"):m<=50?d.classList.add("bg-yellow-500"):d.classList.add("bg-green-500")}c.defeated?o.classList.add("opacity-60"):o.classList.remove("opacity-60")}})}function x(t){return t>=0?`+${t}`:`${t}`}function B(t){return Math.floor(Math.random()*t)+1}function dt(t){const e=t.match(/(\d+)d(\d+)/);if(e){const a=parseInt(e[1]),r=parseInt(e[2]);let o=0;for(let n=0;n<a;n++)o+=B(r);return o}return 0}function mt(t,e){const a=t.match(/(\d+)d(\d+)(?:\+(\d+))?/);if(a){const r=parseInt(a[1]),o=parseInt(a[2]),n=a[3]?parseInt(a[3]):0;return Math.floor(r*((o+1)/2))+n}return 10}const ut="modulepreload",pt=function(t){return"/"+t},z={},ft=function(e,a,r){let o=Promise.resolve();if(a&&a.length>0){document.getElementsByTagName("link");const c=document.querySelector("meta[property=csp-nonce]"),i=(c==null?void 0:c.nonce)||(c==null?void 0:c.getAttribute("nonce"));o=Promise.allSettled(a.map(d=>{if(d=pt(d),d in z)return;z[d]=!0;const m=d.endsWith(".css"),l=m?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${d}"]${l}`))return;const u=document.createElement("link");if(u.rel=m?"stylesheet":ut,m||(u.as="script"),u.crossOrigin="",u.href=d,i&&u.setAttribute("nonce",i),document.head.appendChild(u),m)return new Promise((f,b)=>{u.addEventListener("load",f),u.addEventListener("error",()=>b(new Error(`Unable to preload CSS for ${d}`)))})}))}function n(c){const i=new Event("vite:preloadError",{cancelable:!0});if(i.payload=c,window.dispatchEvent(i),!i.defaultPrevented)throw c}return o.then(c=>{for(const i of c||[])i.status==="rejected"&&n(i.reason);return e().catch(n)})};function gt(t,e){console.log("Applying damage to monster:",t,"amount:",e);const a=g();console.log("All participants:",a);const r=a.findIndex(o=>o.id===t);if(console.log("Monster index:",r),r!==-1&&a[r].type==="monster"){const o=a[r];console.log("Monster before damage:",o);const n=Math.max(0,o.currentHp-e),c=n===0;console.log("New HP:",n,"Defeated:",c),F(t,{currentHp:n,defeated:c});const i=g(),d=i.findIndex(l=>l.id===t),m=i[d];console.log("Monster after update:",m),v(),E()&&I()===d&&S(m)}else console.error("Monster not found or not a monster type")}function bt(t,e){console.log("Healing monster:",t,"amount:",e);const a=g();console.log("All participants:",a);const r=a.findIndex(o=>o.id===t);if(console.log("Monster index:",r),r!==-1&&a[r].type==="monster"){const o=a[r];console.log("Monster before healing:",o);const n=Math.min(o.maxHp,o.currentHp+e),c=n===0;console.log("New HP:",n,"Defeated:",c),F(t,{currentHp:n,defeated:c});const i=g(),d=i.findIndex(l=>l.id===t),m=i[d];console.log("Monster after update:",m),v(),E()&&I()===d&&S(m)}else console.error("Monster not found or not a monster type")}function S(t){var m;if(console.log("Displaying stat block for monster:",t),console.log("Monster AC value:",t.ac),!t||t.type!=="monster"){s.activeStatBlockElement.innerHTML="";return}const e=K()[t.index||t.monsterIndex];if(console.log("Monster data from state:",e),!e){s.activeStatBlockElement.innerHTML='<div class="turn-info">Monster details not available.</div>';return}const a=s.activeStatBlockElement.querySelector(".monster-stat-block");if(a&&a.dataset.monsterId===t.id&&a.dataset.monsterHp===String(t.currentHp))return;!t.actions&&e.actions&&(t.actions=e.actions),!t.special_abilities&&e.special_abilities&&(t.special_abilities=e.special_abilities);const r=t.abilityScores||{str:{score:e.strength,mod:Math.floor((e.strength-10)/2)},dex:{score:e.dexterity,mod:Math.floor((e.dexterity-10)/2)},con:{score:e.constitution,mod:Math.floor((e.constitution-10)/2)},int:{score:e.intelligence,mod:Math.floor((e.intelligence-10)/2)},wis:{score:e.wisdom,mod:Math.floor((e.wisdom-10)/2)},cha:{score:e.charisma,mod:Math.floor((e.charisma-10)/2)}},o=E()&&((m=g()[I()])==null?void 0:m.id)===t.id;console.log("Is current turn:",o),console.log("Monster actions:",t.actions);let n=`
        <div class="stat-block" data-monster-id="${t.id}" data-monster-hp="${t.currentHp}">
            <div class="stat-block-name-bar">
                <h3 class="card-title">${t.name}</h3>
            </div>
            <div class="stat-block-type-bar">
                ${t.size||e.size} ${t.monsterType||e.type}${t.subtype||e.subtype?` (${t.subtype||e.subtype})`:""}, ${t.alignment||e.alignment}
            </div>
            
            <div class="stat-block-content">
                <!-- Top row with core stats -->
                <div class="grid grid-cols-3 gap-2 mb-4">
                    <div class="text-sm"><strong>AC</strong> ${t.ac!==void 0?t.ac:"N/A"}</div>
                    <div class="text-sm"><strong>HP</strong> ${t.currentHp}/${t.maxHp}</div>
                    <div class="text-sm"><strong>Speed</strong> ${Object.entries(t.speed||e.speed).map(([l,u])=>l==="walk"?`${u} ft.`:`${l} ${u} ft.`).join(", ")}</div>
                </div>
                
                <!-- Ability scores in a compact row -->
                <div class="stat-block-abilities">
                    <div class="ability">
                        <div class="ability-name">STR</div>
                        <div class="ability-score">${r.str.score} (${x(r.str.mod)})</div>
                    </div>
                    <div class="ability">
                        <div class="ability-name">DEX</div>
                        <div class="ability-score">${r.dex.score} (${x(r.dex.mod)})</div>
                    </div>
                    <div class="ability">
                        <div class="ability-name">CON</div>
                        <div class="ability-score">${r.con.score} (${x(r.con.mod)})</div>
                    </div>
                    <div class="ability">
                        <div class="ability-name">INT</div>
                        <div class="ability-score">${r.int.score} (${x(r.int.mod)})</div>
                    </div>
                    <div class="ability">
                        <div class="ability-name">WIS</div>
                        <div class="ability-score">${r.wis.score} (${x(r.wis.mod)})</div>
                    </div>
                    <div class="ability">
                        <div class="ability-name">CHA</div>
                        <div class="ability-score">${r.cha.score} (${x(r.cha.mod)})</div>
                    </div>
                </div>
                
                <!-- Tabbed interface for details, abilities, and actions -->
                <div class="border-t border-gray-200 mt-4 pt-4">
                    <div class="flex border-b border-gray-200 mb-4">
                        <button class="px-4 py-2 text-sm font-medium border-b-2 border-primary -mb-px tab-button active" data-tab="details">Details</button>
                        ${t.special_abilities&&t.special_abilities.length>0?'<button class="px-4 py-2 text-sm font-medium border-b-2 border-transparent hover:border-gray-300 -mb-px tab-button" data-tab="abilities">Abilities</button>':""}
                        ${t.actions&&t.actions.length>0?'<button class="px-4 py-2 text-sm font-medium border-b-2 border-transparent hover:border-gray-300 -mb-px tab-button" data-tab="actions">Actions</button>':""}
                    </div>
                    
                    <!-- Details tab -->
                    <div class="tab-content active" id="details-tab">
                        <div class="space-y-2">
    `;if(e.senses){const l=Object.entries(e.senses).map(([u,f])=>`${u.replace(/_/g," ")} ${f}`).join(", ");l&&(n+=`<div class="text-sm mb-1"><strong>Senses</strong> ${l}</div>`)}e.languages&&(n+=`<div class="text-sm mb-1"><strong>Languages</strong> ${e.languages}</div>`),n+=`<div class="text-sm mb-1"><strong>Challenge</strong> ${t.challenge_rating||e.challenge_rating}</div>
                        </div>
                    </div>
    `;const c=t.special_abilities||e.special_abilities;c&&c.length>0&&(n+=`
                    <div class="tab-content" id="abilities-tab">
                        <div class="space-y-2">
        `,c.forEach(l=>{n+=`
                <div class="text-sm mb-2">
                    <strong>${l.name}.</strong> ${l.desc}
                </div>
            `}),n+=`
                        </div>
                    </div>
        `);const i=t.actions||e.actions;i&&i.length>0&&(n+=`
                    <div class="tab-content" id="actions-tab">
                        <div class="space-y-2">
        `,i.forEach(l=>{n+=`
                <div class="text-sm mb-2">
                    <strong>${l.name}.</strong> ${l.desc}
                </div>
            `}),n+=`
                        </div>
        `,o&&(console.log("Adding action buttons for current monster"),n+='<div class="action-buttons">',i.forEach((l,u)=>{console.log(`Adding button for action: ${l.name}, index: ${u}`),n+=`
                    <button class="btn btn-small btn-outline" 
                        data-action="monster-action" 
                        data-monster-id="${t.id}" 
                        data-action-index="${u}">
                        Use ${l.name}
                    </button>
                `}),n+="</div>"),n+=`
                    </div>
        `),n+=`
                </div>
            </div>
        </div>
    `,s.activeStatBlockElement.innerHTML=n;const d=s.activeStatBlockElement.querySelectorAll(".tab-button");d.forEach(l=>{l.addEventListener("click",()=>{d.forEach(h=>{h.classList.remove("active"),h.classList.remove("border-primary"),h.classList.add("border-transparent")}),s.activeStatBlockElement.querySelectorAll(".tab-content").forEach(h=>h.classList.remove("active")),l.classList.add("active"),l.classList.remove("border-transparent"),l.classList.add("border-primary");const f=l.dataset.tab,b=s.activeStatBlockElement.querySelector(`#${f}-tab`);b&&b.classList.add("active")})}),o&&i&&i.length>0&&s.activeStatBlockElement.querySelectorAll('[data-action="monster-action"]').forEach(u=>{u.addEventListener("click",function(f){const b=this.dataset.monsterId,h=parseInt(this.dataset.actionIndex);ft(()=>Promise.resolve().then(()=>ht),void 0).then(y=>{y.performMonsterAction(b,h)}).catch(y=>{console.error("Error importing combat module:",y)})})})}function W(){if(g().length<2){s.turnInfoElement.textContent="Add at least one PC and one monster to start combat.",s.turnInfoElement.classList.remove("hidden");return}Y(!0),_(0),et(1),ot(1),v(),O(),j()}function j(){const t=g(),e=I(),a=t[e];if(a.type==="monster"&&(a.currentHp===0||a.defeated)){q();return}s.turnInfoElement.classList.remove("hidden"),a.type==="pc"?(s.turnInfoElement.innerHTML=`<strong>${a.name}'s turn</strong>`,s.activeStatBlockElement.innerHTML=`
            <div class="p-4 bg-gray-50 rounded-md text-center">
                <p class="text-gray-500">No stat block available for player characters.</p>
            </div>
        `):(s.turnInfoElement.innerHTML=`<strong>${a.name}'s turn</strong><br>
            Select an action from the monster's stat block.`,S(a))}function V(t,e){var i;console.log("performMonsterAction called with:",{monsterId:t,actionIndex:e});const a=g(),r=a.findIndex(d=>d.id===t);if(console.log("Monster index in participants:",r),r===-1||a[r].type!=="monster"){console.error("Monster not found or not a monster type");return}const o=a[r];if(console.log("Monster from participants:",o),o.actions&&Array.isArray(o.actions)&&o.actions.length>e){console.log("Using actions from monster instance");const d=o.actions[e];G(o,d);return}const n=K()[o.index||o.monsterIndex];if(console.log("Monster details from state:",n),console.log("Monster actions from state:",n==null?void 0:n.actions),!n||!n.actions||e>=n.actions.length){console.error("Action not available:",{hasMonsterDetails:!!n,hasActions:!!(n&&n.actions),actionIndex:e,actionsLength:(i=n==null?void 0:n.actions)==null?void 0:i.length}),s.turnInfoElement.innerHTML+="<br>Action not available.";return}const c=n.actions[e];console.log("Selected action:",c),!o.actions&&n.actions&&(o.actions=n.actions,F(o.id,{actions:n.actions})),G(o,c)}function G(t,e){console.log("Processing monster action:",e);const r=g().filter(n=>n.type==="pc");if(r.length===0){s.turnInfoElement.innerHTML=`<strong>${t.name}'s turn</strong><br>No targets available.`;return}const o=r[Math.floor(Math.random()*r.length)];if(e.attack_bonus!==void 0){const n=B(20),c=n+e.attack_bonus;let i=`
            <strong>${t.name}'s turn</strong><br>
            ${t.name} uses ${e.name} on ${o.name}.<br>
            Attack roll: ${n} + ${e.attack_bonus} = ${c} vs AC ${o.ac}
        `;if(c>=o.ac){let d=0,m="";e.damage&&e.damage.length>0&&(e.damage.forEach(l=>{if(l.damage_dice){const u=dt(l.damage_dice),f=l.damage_bonus||0,b=u+f;d+=b,m+=`${u} + ${f} ${l.damage_type.name}, `}}),m=m.slice(0,-2)),i+=`<br>Hit! Deals ${d} damage (${m}).`}else i+="<br>Misses!";s.turnInfoElement.innerHTML=i}else s.turnInfoElement.innerHTML=`
            <strong>${t.name}'s turn</strong><br>
            ${t.name} uses ${e.name}.<br>
            ${e.desc||"No description available."}
        `}function q(){const t=g(),a=(I()+1)%t.length;a===0&&nt(),at(),_(a),v(),O(),j()}const ht=Object.freeze(Object.defineProperty({__proto__:null,nextTurn:q,performMonsterAction:V,processTurn:j,startCombat:W},Symbol.toStringTag,{value:"Module"}));function vt(t){t.preventDefault();const e=s.pcNameInput.value.trim(),a=parseInt(s.pcInitiativeInput.value),r=parseInt(s.pcAcInput.value);if(e&&!isNaN(a)&&!isNaN(r)){const o={id:`pc-${Date.now()}`,name:e,initiative:a,ac:r,type:"pc"};R(o),v(),s.pcForm.reset(),s.pcNameInput.focus()}}function N(t=1){const e=["Aragorn","Gandalf","Legolas","Gimli","Frodo","Samwise","Meriadoc","Peregrin","Boromir","Faramir","Ã‰owyn","Ã‰omer","ThÃ©oden","Galadriel","Elrond","Arwen","Bilbo","Thorin","Balin","Dwalin","FÃ­li","KÃ­li","GlÃ³in","Ã“in","Dori","Nori","Ori","Bifur","Bofur","Bombur","Thranduil","Tauriel","Bard","Beorn","Radagast","Saruman","Gollum","Smaug","Denethor","Celeborn","Haldir","Glorfindel","CÃ­rdan","Elendil","Isildur","Gil-galad","Celebrimbor","Thingol","LÃºthien","Beren"];t=Math.max(1,Math.min(10,parseInt(t)||1));const a=new Set;let r=[];for(let o=0;o<t;o++){let n;do n=e[Math.floor(Math.random()*e.length)];while(a.has(n)&&a.size<e.length);a.has(n)&&(n=`${n} ${o+1}`),a.add(n);const c=B(20)+Math.floor(Math.random()*5),i=Math.floor(Math.random()*8)+12,d={id:`pc-${Date.now()}-${o}`,name:n,initiative:c,ac:i,type:"pc"};R(d),r.push(d),console.log(`Added random PC: ${n} (Initiative: ${c}, AC: ${i})`)}if(v(),s.turnInfoElement.classList.remove("hidden"),t===1){const o=r[0];s.turnInfoElement.innerHTML=`
            <div class="bg-green-100 border-l-4 border-green-500 text-green-700 p-2 mb-2">
                Added random PC: <strong>${o.name}</strong> (Initiative: ${o.initiative}, AC: ${o.ac})
            </div>
        `}else s.turnInfoElement.innerHTML=`
            <div class="bg-green-100 border-l-4 border-green-500 text-green-700 p-2 mb-2">
                Added ${t} random PCs to the initiative order.
            </div>
        `;setTimeout(()=>{E()||(s.turnInfoElement.innerHTML="",s.turnInfoElement.classList.add("hidden"))},3e3)}async function yt(t){t.preventDefault();const e=s.monsterSearchInput.value.trim(),a=parseInt(s.monsterCountInput.value);if(e&&a>0){s.monsterForm.classList.add("loading");const r=Array.from(s.monsterList.options).find(o=>o.value===e);if(r){const o=r.dataset.index;console.log("Selected monster index:",o);try{const n=await it(o);if(n){console.log("Monster data fetched:",n),console.log("Monster armor class:",n.armor_class);const c=mt(n.hit_dice,n.constitution);for(let i=0;i<a;i++){const d=B(1,20)+Math.floor((n.dexterity-10)/2),m=a>1?`${n.name} ${i+1}`:n.name,l={str:{score:n.strength,mod:Math.floor((n.strength-10)/2)},dex:{score:n.dexterity,mod:Math.floor((n.dexterity-10)/2)},con:{score:n.constitution,mod:Math.floor((n.constitution-10)/2)},int:{score:n.intelligence,mod:Math.floor((n.intelligence-10)/2)},wis:{score:n.wisdom,mod:Math.floor((n.wisdom-10)/2)},cha:{score:n.charisma,mod:Math.floor((n.charisma-10)/2)}};let u=10;n.armor_class&&Array.isArray(n.armor_class)&&n.armor_class.length>0?(u=n.armor_class[0].value,console.log("Monster armor class extracted:",u)):console.warn("Could not extract armor class from monster data:",n.armor_class);const f={id:`monster-${Date.now()}-${i}`,name:m,initiative:d,ac:u,type:"monster",index:o,monsterIndex:o,maxHp:c,currentHp:c,defeated:!1,size:n.size,monsterType:n.type,subtype:n.subtype,alignment:n.alignment,speed:n.speed,abilityScores:l,challenge_rating:n.challenge_rating,actions:n.actions,special_abilities:n.special_abilities};console.log("Adding monster to participants:",f),R(f)}v(),s.monsterForm.reset(),s.monsterSearchInput.focus()}}catch(n){console.error("Error adding monster:",n),alert("Error adding monster. Please try again.")}finally{s.monsterForm.classList.remove("loading")}}else alert("Monster not found. Please select a monster from the list."),s.monsterForm.classList.remove("loading")}}function xt(t){const e=t.target.dataset.action;if(!e)return;const a=t.target.closest("[data-id]");if(!a){console.error("Could not find parent list item with data-id");return}const r=a.dataset.id;if(!r){console.error("Missing participant ID");return}switch(e){case"damage":const o=prompt("Enter damage amount:","0");if(o===null)return;const n=parseInt(o);!isNaN(n)&&n>0?gt(r,n):alert("Please enter a valid damage amount (a positive number).");break;case"heal":const c=prompt("Enter healing amount:","0");if(c===null)return;const i=parseInt(c);!isNaN(i)&&i>0?bt(r,i):alert("Please enter a valid healing amount (a positive number).");break;case"remove":confirm("Are you sure you want to remove this participant?")&&(tt(r),v());break;case"stats":const m=g().find(l=>l.id===r&&l.type==="monster");m&&S(m);break;default:console.warn("Unknown action:",e)}}function It(){console.log("Initializing application"),st(),Et(),O()}function Et(){console.log("Setting up event listeners"),console.log("DOM elements:",s),s.pcForm.addEventListener("submit",vt),s.randomPcButton.addEventListener("click",t=>{t.stopPropagation(),s.randomPcDropdown.classList.toggle("hidden")}),s.randomPcButton.addEventListener("dblclick",t=>{t.stopPropagation(),s.randomPcDropdown.classList.add("hidden"),N(1)}),s.randomPcButton.addEventListener("contextmenu",t=>{t.preventDefault(),t.stopPropagation(),s.randomPcDropdown.classList.add("hidden"),N(1)}),s.randomPcCountButtons.forEach(t=>{t.addEventListener("click",e=>{const a=parseInt(e.target.dataset.count);N(a),s.randomPcDropdown.classList.add("hidden")})}),document.addEventListener("click",t=>{!s.randomPcDropdown.contains(t.target)&&t.target!==s.randomPcButton&&s.randomPcDropdown.classList.add("hidden")}),s.monsterForm.addEventListener("submit",yt),s.startCombatButton.addEventListener("click",W),s.nextTurnButton.addEventListener("click",q),console.log("Setting up initiative list click handler"),s.initiativeListElement.addEventListener("click",xt),console.log("Setting up active stat block click handler"),s.activeStatBlockElement.addEventListener("click",t=>{if(console.log("Active stat block clicked:",t.target),t.target.dataset.action==="monster-action"){console.log("Monster action button clicked");const e=t.target.dataset.monsterId,a=t.target.dataset.actionIndex;console.log("Monster ID:",e),console.log("Action Index:",a),e&&a!==void 0?(console.log("Calling performMonsterAction from stat block"),V(e,parseInt(a))):console.error("Missing monsterId or actionIndex in stat block:",{monsterId:e,actionIndex:a})}}),console.log("Event listeners set up")}document.addEventListener("DOMContentLoaded",It);
